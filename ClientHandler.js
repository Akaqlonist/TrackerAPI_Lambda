//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

'use strict';
console.log("Loading function");



exports.handler = function(event, context, callback) {
    var AWS = require('aws-sdk');
    var docClient = new AWS.DynamoDB.DocumentClient();
    var responseCode = 200;
    var requestBody, pathParams, queryStringParams, headerParams, stage,
    stageVariables, cognitoIdentityId, httpMethod, sourceIp, userAgent,
    requestId, resourcePath;
    console.log("request: " + JSON.stringify(event, null, 2));

    // Request Body
    requestBody = event.body;

    if (requestBody !== undefined && requestBody !== null) {

        // Set 'test-status' field in the request to test sending a specific response status code (e.g., 503)
        responseCode = JSON.parse(requestBody)['test-status'];
    }

    // Path Parameters
    pathParams = event.path;

    // Query String Parameters
    queryStringParams = event.queryStringParameters;

    // Header Parameters
    headerParams = event.headers;

    if (event.requestContext !== null && event.requestContext !== undefined) {

        var requestContext = event.requestContext;

        // API Gateway Stage
        stage = requestContext.stage;

        // Unique Request ID
        requestId = requestContext.requestId;

        // Resource Path
        resourcePath = requestContext.resourcePath;

        var identity = requestContext.identity;

        // Amazon Cognito User Identity
        cognitoIdentityId = identity.cognitoIdentityId;

        // Source IP
        sourceIp = identity.sourceIp;

        // User-Agent
        userAgent = identity.userAgent;
    }

    // API Gateway Stage Variables
    stageVariables = event.stageVariables;

    // HTTP Method (e.g., POST, GET, HEAD)
    httpMethod = event.httpMethod;

    // TODO: Put your application logic here...
    
    if(httpMethod == "GET")
    {
        // First verison will be to get all clients of a certain user
        var params = {
            TableName : "treatmenttracker-mobilehub-798355782-ClientId",
            KeyConditionExpression: "#usr = :CogId",
            ExpressionAttributeNames:{
                "#usr": "userId"
            },
            ExpressionAttributeValues: {
                ":CogId":cognitoIdentityId
            }
        };

        console.log(JSON.stringify(params, null, 2));
    
        docClient.query(params).promise()
            .then(data => {
                console.log("Query succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Client"
                    },
                    body: JSON.stringify(data.Items)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to query. Error:", JSON.stringify(err, null, 2));
            });
    } else if (httpMethod == "POST") {
        let info = JSON.parse(requestBody);
        let clientId = Math.round(Date.now()/1000) + '-' + info.Name + '-' + info.Zip;
        
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-ClientId",
            Item: {
                "userId":info.userId,
                "ClientId":clientId,
                "City":info.City,
                "ClientName":info.Name,
                "Contact":info.Contact,
                "PayRate":info.PayRate,
                "StreetAddress":info.StreetAddress,
                "ClientState":info.State,
                "Zip":info.Zip
            }
        };
        docClient.put(params).promise()
            .then(data => {
                console.log("put succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Client"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to put. Error:", JSON.stringify(err, null, 2));
            });
    } else if(httpMethod == "DELETE") {
        
        // Delete client 
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-ClientId",
            Key:{
                "userId":cognitoIdentityId,
                "ClientId":JSON.parse(requestBody).ClientId
            }
        };

        console.log(JSON.stringify(params, null, 2));
    
        docClient.delete(params).promise()
            .then(data => {
                console.log("delete succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Client"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to query. Error:", JSON.stringify(err, null, 2));
            });
        
    } else if(httpMethod == "PUT") {
        
        //update client
        var parsedBody = JSON.parse(requestBody);
        
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-ClientId",
            Key:{
                "userId":parsedBody.userId,
                "ClientId":parsedBody.clientId
            },
            UpdateExpression: 'set #payrate = :payrate, #city = :city, #state = :state, #street = :street, #zip = :zip, #name = :name',
            ExpressionAttributeNames: {'#payrate': 'PayRate', '#city' : 'City', '#state' : 'ClientState', '#street' : 'StreetAddress', '#zip' : 'Zip', '#name' : 'ClientName'},
            ExpressionAttributeValues: {
                ':payrate' : parsedBody.PayRate,
                ':city' : parsedBody.City,
                ':state' : parsedBody.State,
                ':street' : parsedBody.StreetAddress,
                ':zip' : parsedBody.Zip,
                ':name' : parsedBody.Name
            }
        };
        
        console.log(JSON.stringify(params, null, 2));
    
        docClient.update(params).promise()
            .then(data => {
                console.log("update succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Client"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to update. Error:", JSON.stringify(err, null, 2));
            });
        
        
    } else {
        // Paramter not found just echo back the same shit sent
        // For demonstration purposes, we'll just echo these values back to the client
        var responseBody = {
            requestBody : requestBody,
            pathParams : pathParams,
            queryStringParams : queryStringParams,
            headerParams : headerParams,
            stage : stage,
            stageVariables : stageVariables,
            cognitoIdentityId : cognitoIdentityId,
            httpMethod : httpMethod,
            sourceIp : sourceIp,
            userAgent : userAgent,
            requestId : requestId,
            resourcePath : resourcePath
        };
    
        var response = {
            statusCode: responseCode,
            headers: {
                "x-custom-header" : "custom header value"
            },
            body: JSON.stringify(responseBody)
        };
        console.log("response: " + JSON.stringify(response))
        context.succeed(response);
    }
};

if (require.main === module) {
    module.exports.handler(event, {succeed: (err, res) => console.log(err, res)}, {});
}