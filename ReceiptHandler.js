//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//



'use strict';
console.log("Loading function");

exports.handler = function(event, context, callback) {
    
    var AWS = require('aws-sdk');
    var docClient = new AWS.DynamoDB.DocumentClient();
    var responseCode = 200;
    var requestBody, pathParams, queryStringParams, headerParams, stage,
    stageVariables, cognitoIdentityId, httpMethod, sourceIp, userAgent,
    requestId, resourcePath;
    
    console.log("request: " + JSON.stringify(event, null, 2));

    // Request Body
    requestBody = event.body;

    if (requestBody !== undefined && requestBody !== null) {

        // Set 'test-status' field in the request to test sending a specific response status code (e.g., 503)
        responseCode = JSON.parse(requestBody)['test-status'];
    }

    // Path Parameters
    pathParams = event.path;

    // Query String Parameters
    queryStringParams = event.queryStringParameters;

    // Header Parameters
    headerParams = event.headers;

    if (event.requestContext !== null && event.requestContext !== undefined) {

        var requestContext = event.requestContext;

        // API Gateway Stage
        stage = requestContext.stage;

        // Unique Request ID
        requestId = requestContext.requestId;

        // Resource Path
        resourcePath = requestContext.resourcePath;

        var identity = requestContext.identity;

        // Amazon Cognito User Identity
        cognitoIdentityId = identity.cognitoIdentityId;

        // Source IP
        sourceIp = identity.sourceIp;

        // User-Agent
        userAgent = identity.userAgent;
    }

    // API Gateway Stage Variables
    stageVariables = event.stageVariables;

    // HTTP Method (e.g., POST, GET, HEAD)
    httpMethod = event.httpMethod;

    // TODO: Put your application logic here...
    console.log(requestBody);

    if(httpMethod == "GET")
    {
        var params = {};
        if(queryStringParams.length === 0)
        {
            params = {
                TableName : "treatmenttracker-mobilehub-798355782-Receipts",
                KeyConditionExpression: "#usr = :CogId ",
                ExpressionAttributeNames:{
                "#usr": "userId"
                },
                ExpressionAttributeValues: {
                ":CogId":cognitoIdentityId
                }
            };
        }
        else
        {
            //there is a querystring and only need to pull info on one item
            params = {
                TableName : "treatmenttracker-mobilehub-798355782-Receipts",
                KeyConditionExpression: "#usr = :CogId ",
                ExpressionAttributeNames:{
                    "#usr": "userId"
                },
                ExpressionAttributeValues: {
                    ":CogId":cognitoIdentityId
                }
            };
        }
        // First verison will be to get all clients of a certain user
        
    
        console.log(JSON.stringify(params));
    

        docClient.query(params, function(err, data) {
            if (err) {
                console.log("Unable to query. Error:", JSON.stringify(err, null, 2));
            } else {
                console.log("Query succeeded.");
                console.log("response: " + JSON.stringify(data));
        
                var response = {
                    statusCode: responseCode,
                    headers: {
                        "x-custom-header" : "custom header value"
                    },
                    body: JSON.stringify(data.Items)
                };
        
                context.succeed(response);
            }
        });
    }
    else if(httpMethod == "POST") {
        var jbody = JSON.parse(requestBody);
        
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-Receipts",
            Item: {
                "userId":jbody.userId,
                "clientId":jbody.clientId,
                "DateTime":jbody.DateTime,
                "Notes":jbody.Notes,
                "Store":jbody.Store,
                "Attachments":jbody.Attachments,
                "Amount":jbody.Amount
            }
        };
        
        console.log(JSON.stringify(params));
        
        docClient.put(params).promise()
            .then(data => {
                console.log("put succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Receipts"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to put. Error:", JSON.stringify(err, null, 2));
            });
        
    }
    else if(httpMethod == "PUT")
    {

        //update receipt
        var parsedBody = JSON.parse(requestBody);
        
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-Receipts",
            Key:{
                "userId":parsedBody.userId,
                "DateTime":parsedBody.DateTime
            },
            UpdateExpression: 'set #store = :store, #amount = :amount, #attachments = :attachments, #clientId = :clientId, #notes = :notes',
            ExpressionAttributeNames: {'#store': 'Store', '#amount' : 'Amount', '#attachments' : 'Attachments', '#clientId' : 'clientId', '#notes' : 'Notes'},
            ExpressionAttributeValues: {
                ':store' : parsedBody.Store,
                ':amount' : parsedBody.Amount,
                ':attachments' : parsedBody.Attachments,
                ':clientId' : parsedBody.clientId,
                ':notes' : parsedBody.Notes
            }
        };
        
        console.log(JSON.stringify(params, null, 2));
    
        docClient.update(params).promise()
            .then(data => {
                console.log("update succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Receipts"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to update. Error:", JSON.stringify(err, null, 2));
            });
    }
    else if(httpMethod == "DELETE")
    {
        //delete item 
        var params = {
            TableName:"treatmenttracker-mobilehub-798355782-Receipts",
            Key:{
                "userId":cognitoIdentityId,
                "DateTime":JSON.parse(requestBody).DateTime
            }
        };

        console.log(JSON.stringify(params, null, 2));
    
        docClient.delete(params).promise()
            .then(data => {
                console.log("delete succeeded.");
                console.log("response: " + JSON.stringify(data))
                // context.succeed(data.Items);
                var response = {
                    statusCode: 200,
                    headers: {
                        "x-TxTracker-header" : "Receipts"
                    },
                    body: JSON.stringify(data)
                };
                context.succeed(response);
            })
            .catch(err => {
                console.log("Unable to delete. Error:", JSON.stringify(err, null, 2));
            });
    }
    else
    {
    // For demonstration purposes, we'll just echo these values back to the client
    var responseBody = {
        requestBody : requestBody,
        pathParams : pathParams,
        queryStringParams : queryStringParams,
        headerParams : headerParams,
        stage : stage,
        stageVariables : stageVariables,
        cognitoIdentityId : cognitoIdentityId,
        httpMethod : httpMethod,
        sourceIp : sourceIp,
        userAgent : userAgent,
        requestId : requestId,
        resourcePath : resourcePath
    };

    var response = {
        statusCode: responseCode,
        headers: {
            "x-custom-header" : "custom header value"
        },
        body: JSON.stringify(responseBody)
    };
    console.log("response: " + JSON.stringify(response));
    context.succeed(response);
    }



    
};


if (require.main === module) {
    module.exports.handler(event, {succeed: (err, res) => console.log(err, res)}, {});
}